var store = [{
        "title": "프로젝트 생성",
        "excerpt":"EDISON 워크벤치 기반 분석기(Post-Processor) 개발 매뉴얼 입니다. Liferay 6.2.5 포틀릿 기반으로 개발 하는 방법에 대해 순차적으로 설명 되어 있습니다. Liferay 6.2 기반 프로젝트 구성 개발 환경은 아래와 같습니다.   이클립스 Neon 3 Release (4.6.3)  liferay-portal-6.2-ce-ga6  liferay-plugins-sdk-6.21. Liferay plugin Project  생성 이클립스 환경에서 Liferay Plugins Projects를 생성합니다.이클립스 환경에서 New -&gt; Liferay Plugin Project를 선택합니다.프로젝트 이름을 작성하고 include sample code 체크를 해지합니다.프로젝트 이름을 작성하고 Liferay MVC를 선택하여 최종적으로 프로젝트 생성을 마무리 합니다.생성이 완료된 플러그인 프로젝트의 구성은 다음과 같습니다. 2. EDISON 워크벤치 연동을 위한 Analyzer 포틀릿 생성 EDISON 플랫폼의 워크벤치 연동을 위한 포틀릿을 생성합니다.생성된 Liferay Plugins Projects 내에 Liferay Portlet을 생성합니다.포틀릿 클래스명, 패키지명은 자유롭게 원하는 형태로 생성합니다.포틀릿 클래스 명에 따라 자동으로 설정되는 값입니다. 나중에 수정할 수 있으니 현재는 Next를 누르고 넘어갑니다.마찬가지로 자동으로 설정되는 값입니다. 나중에 수정할 수 있으니 현재는 Next를 누르고 넘어갑니다.특별히 추가할 인터페이스가 없다면 Finish를 선택하고 포틀릿 생성을 완료합니다. 3. 포틀릿 리소스 접근 설정 EDISON 플랫폼에서 워크벤치와 연동을 위해서는 각 포틀릿간의 외부 접근이 가능하도록 권한 설정을 해 주어야 합니다. 따라서 외부(다른 포틀릿)에서 개발하려는 포틀릿으로 접근하기 위해서는 포틀릿의 외부 권한을 설정하여야 합니다.설정하는 방법은 아래와 같습니다.liferay-portlet.xml 파일 내부에 아래 코드를 추가합니다. &lt;add-default-resource&gt;true&lt;/add-default-resource&gt;아래의 그림과 같이 xml 파일 내부에 생성한 포틀릿 내 해당 코드를 추가합니다. 4. 기본 플러그인 추가 설정 현재 Liferay Plugin Project에서 기본적으로 필요한 플러그인들을 추가합니다.3번과 마찬가지로 xml 파일을 변경하는 것으로, liferay-plugin-package.properties 파일을 수정합니다.기본적으로 이클립스에서 제공해주는 UI 환경에서 플러그인을 추가합니다. 해당 화면은 아래와 같습니다. Portal Dependency Jars 섹션에서 Add…버튼을 클릭한 후, jstl 을 검색해서 나오는 jstl-api.jar, jstl-impl.jar파일 두개를 추가합니다. 5. 워크벤치 연동을 위한 플러그인 추가 설정 워크벤치 연동을 위해 필요한 라이브러리들을 현재 생성한 프로젝트 내 WEB-INF/lib 내 추가합니다. 필요 라이브러리들을 추가합니다.commons-beanutils.jarcommons-collections.jarcommons-exec-1.1.jarcommons-fileupload.jarcommons-io.jarcommons-lang.jarSciencePlatform-hook-service.jar ","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide1/",
        "teaser":null},{
        "title": "프로젝트 기본 설정",
        "excerpt":"EDISON 워크벤치 기반 분석기(Post-Processor) 개발 매뉴얼 입니다. Liferay 6.2.5 포틀릿 기반으로 개발 하는 방법에 대해 순차적으로 설명 되어 있습니다. Java 코드 추가 1 (파일 관리) 생성된 프로젝트에서 포틀릿 클래스에 파일 전송 및 파일 다운로드 등을 위한 자바 코드를 추가 합니다. MVCPortlet을 extends 하게 되면 그 중 미리 선언되어 있는 serveResource 함수를 오버라이딩 하면 됩니다.해당 코드는 수정할 필요없이 그대로 개발중인 프로젝트에 넣기만 하면됩니다. 이전 프로젝트 생성 부분에서 SciencePlatform-hook-service.jar라이브러리를 추가했다면 다음 자바 코드를 문제없이 호출할 수 있습니다. @Overridepublic void serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)    throws IOException, PortletException{    String fileName = ParamUtil.getString(resourceRequest, \"fileName\");    String parentPath = ParamUtil.getString(resourceRequest, \"parentPath\");    Path filePath = Paths.get(parentPath).resolve(fileName);    String command = ParamUtil.getString(resourceRequest, \"command\");    String repositoryType = ParamUtil.getString(resourceRequest, \"repositoryType\", OSPRepositoryTypes.USER_JOBS.toString());    if(command.equalsIgnoreCase(\"GET_FILE\")){        try{        \tOSPFileUtil.getFile(resourceRequest, resourceResponse, filePath.toString(), repositoryType);        }catch (PortalException | SystemException e){            _log.error(\"[JSMOL] readFileContent(): \" + filePath.toString());            throw new PortletException();        }    }else if(command.equalsIgnoreCase(\"READ_IMAGE\")){        try{        \tOSPFileUtil.getFile(resourceRequest, resourceResponse, filePath.toString(), repositoryType);        }catch (PortalException | SystemException e){            _log.error(\"[JSMOL] readFileContent(): \" + filePath.toString());            throw new PortletException();        }    }else if(command.equalsIgnoreCase(\"READ_FIRST_FILE\")){        try{        \tOSPFileUtil.readFirstFileContent(resourceRequest, resourceResponse, parentPath, fileName, repositoryType);        }catch (PortalException | SystemException e){            _log.error(\"[JSMOL] readFileContent(): \" + filePath.toString());            throw new PortletException();        }    }else if(command.equalsIgnoreCase(\"GET_FIRST_FILE_NAME\")){        try{        \tSystem.out.println(\"[JSMOL] test get firstFileName\");        \tOSPFileUtil.getFirstFileName(resourceRequest, resourceResponse, parentPath, fileName, repositoryType);        }catch (PortalException | SystemException e){            _log.error(\"[JSMOL] getFirstFileName(): \" + filePath.toString());            throw new PortletException();        }    }else if(command.equalsIgnoreCase(\"DOWNLOAD_FILE\")){        try{        \tOSPFileUtil.downloadFile(resourceRequest, resourceResponse, filePath.toString(), repositoryType);        }catch (PortalException | SystemException e){            _log.error(\"[JSMOL] checkValidFile(): \" + filePath.toString());            throw new PortletException();        }    }else{        _log.error(\"Un-known command: \" + command);        throw new PortletException();    }}Java 코드 추가 2 (워크벤치 공유 변수) 워크벤치 실행을 위해 필요한 기본 값들을 설정하기 위한 자바 코드를 추가합니다. 워크벤치에서 개발하고 있는 분석기를 이용하여 시뮬레이션 환경을 구성할 때 필수적으로 확인하는 변수들의 값을 기본값으로 설정하는 부분입니다. 마찬가지로 MVCPortlet을 extends 하게 되면 그 중 미리 선언되어 있는 doView 함수를 오버라이딩 하면 됩니다. @Overridepublic void doView(RenderRequest renderRequest, RenderResponse renderResponse) throws IOException, PortletException{  boolean eventEnable = ParamUtil.getBoolean(renderRequest, \"eventEnable\", true);  String inputData = ParamUtil.getString(renderRequest, \"inputData\");  String connector = ParamUtil.getString(renderRequest, \"connector\", \"connector\");  String mode = ParamUtil.getString(renderRequest, \"mode\", \"VIEW\");  renderRequest.setAttribute(\"eventEnable\", eventEnable);  renderRequest.setAttribute(\"inputData\", inputData);  renderRequest.setAttribute(\"connector\", connector);  renderRequest.setAttribute(\"mode\", mode);  super.doView(renderRequest, renderResponse);}지금까지 기본적인 java 소스 코드를 추가하였습니다. 해당 소스코드는 워크벤치와 연동 될 때, 파일 관리와 기본 변수 값을 체크하기 위해 필요한 부분입니다. 기본적으로 필요한 자바 소스코드 외에는 추가할 필요가 없는 부분이니 그냥 소소코드를 생성된 자바 파일에 복사해서 붙여넣기만 하면 됩니다. 로그 변수 선언 생성된 자바 파일 안에서 시스템에 필요한 로그를 선언하기 위해 변수를 선언할 필요가 있습니다.private static Log _log = LogFactoryUtil.getLog(TestAnalyzerPortlet.class);해당 변수는 위와 같이 선언하며, 생성된 자바 포틀릿 클래스 명에 따라 클래스 명(TestAnalyzerPortlet.class)이 달라집니다. Java 코드 라이브러리 확인 위의 절차에 따라 자바 소스 코드들을 추가하였다면, 라이브러리들을 해당 클레스에 import 해야 합다. 사용되는 클래스 라이브러리들은 아래와 같으니 동일한 이름의 다른 라이브러리를 호출하지 않도록 주의해야 합니다. import java.io.IOException;import java.nio.file.Path;import java.nio.file.Paths;import javax.portlet.PortletException;import javax.portlet.RenderRequest;import javax.portlet.RenderResponse;import javax.portlet.ResourceRequest;import javax.portlet.ResourceResponse;import com.kisti.osp.constants.OSPRepositoryTypes;import com.kisti.osp.service.FileManagementLocalServiceUtil;import com.kisti.osp.util.OSPFileUtil;import com.liferay.portal.kernel.exception.PortalException;import com.liferay.portal.kernel.exception.SystemException;import com.liferay.portal.kernel.log.Log;import com.liferay.portal.kernel.log.LogFactoryUtil;import com.liferay.portal.kernel.util.ParamUtil;import com.liferay.util.bridges.mvc.MVCPortlet;","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide2/",
        "teaser":null},{
        "title": "스크립트 단위의 뷰 설정",
        "excerpt":"이전에 설정되었던 부분은 서버 사이드에서 실행되는 컨트롤 코드 부분이었습니다.워크벤치 기반 분석기 개발을 위해서는 스크립트 단위의 이벤트 프로세싱을 통해 이루어 집니다. 따라서 뷰 부분의 스크립트 단위로 코드를 개발하며, 해당 뷰 부분에서 필요로 하는 기본 코드들이 있습니다. 따라서 그에 따른 스크립트 기본 소스 코드들을 추가하는 방법을 서술하도록 하겠습니다. init.jsp 파일 생성 및 코드 입력 생성된 프로젝트 내 /html 폴더 내 init.jsp 파일을 생성합니다. 생성된 init.jsp 파일 내 뷰 개발을 위한 필요 라이브러리 코드를 추가하고 라이프레이 기본 라이브러리들을 추가합니다.추가해야 하는 코드는 아래와 같습니다. &lt;%@ taglib uri=\"http://java.sun.com/portlet_2_0\" prefix=\"portlet\" %&gt;&lt;%@ taglib uri=\"http://alloy.liferay.com/tld/aui\" prefix=\"aui\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/ui\" prefix=\"liferay-ui\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/theme\" prefix=\"theme\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/security\" prefix=\"liferay-security\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/portlet\" prefix=\"liferay-portlet\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%&gt;&lt;!-- JQuery --&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery-ui.min.js\" &gt;&lt;/script&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery.blockUI.js\" &gt;&lt;/script&gt;&lt;link type=\"text/css\" href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery-ui.css\" rel=\"stylesheet\" /&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"&lt;%=request.getContextPath()%&gt;/css/main.css\"&gt;&lt;link href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap-toggle.min.css\" rel=\"stylesheet\"&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap-toggle.min.js\"&gt;&lt;/script&gt;&lt;!-- bootstrap --&gt;&lt;link href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap.min.css\" rel=\"stylesheet\"&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;portlet:defineObjects /&gt;&lt;theme:defineObjects /&gt;스크립트 라이브러리: jqueryxxx.min.js 사용 (워크벤치 시스템과 충돌) 스크립트 라이브러리 충돌이 나서 워크벤치 시뮬레이션이 동작하지 않을 수 있습니다. 따라서 jqery 스크립트를 비롯한 대부분의 스크립트 파일은 init.jsp 파일에 추가하지 마시기 바랍니다. 하지만 JQuery 스크립트는 플랫폼에 설치되어 있으니 라이브러리를 사용할 수 있습니다. 워크벤치 연동을 위한 CSS 설정 main.css 파일에서 osp-analyzer.css파일을 호출합니다. @import url(\"./osp-analyzer.css\");osp-analyzer.css파일을 main.css파일과 같은 폴더(/css)안에 추가합니다.osp-analyzer.css 스타일 코드는 아래와 같습니다. .osp-analyzer {\tborder:none;\theight: 100%;   \tmin-height:800px;   \tmargin: 0;}.osp-analyzer .header{\theight: 40px;\tmargin:10px 5px 10px 5px;}.osp-analyzer .header [class*=\"col-\"]{\tpadding-left: 0;\tpadding-right: 0;}.osp-analyzer .no-header-frame{\tvertical-align:middle;\tborder:none;\theight: 100%;}.osp-analyzer .frame{\tvertical-align:middle;\tborder:none;\theight: 90%;}.osp-analyzer .canvas {   \tborder:none;   \theight:100%;   \tmargin:0;   \tpadding:0;   \toverflow:auto;}.osp-analyzer .iframe-canvas {   \tborder:none;   \theight:100%;   \tmargin:0;   \tpadding:0;   \toverflow:hidden;}.osp-analyzer .icon-menu {  font-size: 15px;  color: #5cb2d7;  border: 2px solid;  border-radius: 3px;  padding-left: 2px;  padding-right: 3px;  vertical-align: middle;}.osp-analyzer .hidden {\tdisplay: none;}jsp 파일 뷰와 분석기 호출부 처리 기본 워크벤치 연동을 위한 이벤트 처리를 하는 jsp 파일(testview.jsp)과 실제 분석하는 부분을 사용자에게 서비스하고 데이터를 가시화하여 제공하는 부분의 jsp 파일(loadAnalyzer.jsp)를 프로젝트 내 생성하여 데이터를 처리한다. 파일명은 임의로 설정할 수 있지만 portlet.xml 파일에서 설정을 잘 잡아주어야 합니다. 이벤트 처리를 하는 jsp 파일을 포틀릿과 연결된 초기 jsp 파라미터로 설정해 주어야 합니다. 이벤트 처리를 하는 jsp 파일의 파일명을 testview.jsp로 했다면, portlet.xml 파일의 설정은 다음과 같습니다. &lt;init-param&gt;\t&lt;name&gt;view-template&lt;/name&gt;\t&lt;value&gt;/html/testanalyzer/testview.jsp&lt;/value&gt;&lt;/init-param&gt;지금까지 설정에 따른 전체 프로젝트의 구조는 다음과 같습니다. ├AnalyzerExample-portlet/├─docroot/├──css/├───main.css├───osp-analyzer.css├──html/├───testanalyzer/├────testview.jsp├────loadAnalyzer.jsp├──js/├───main.js├──META-INF/├───MANIFEST.MF├──WEB-INF/├───lib/├────commons-beanutils.jar├────commons-collections.jar├────commons-exec-1.1.jar├────commons-fileupload.jar├────commons-io.jar├────commons-lang.jar├────SciencePlatform-hook-service.jar├───tlb/├───liferay-display.xml├───liferay-plugin-packkage.properties├───liferay-portlet.xml├───portlet.xml├───web.xml이외에 추가로 파일이 더 있을 수도 있지만 필수적으로 필요한 파일들은 위의 구조와 같으니 비교하여 체크해 보시기 바랍니다. ","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide3/",
        "teaser":null},{
        "title": "이벤트처리",
        "excerpt":"이전에 설정되었던 부분은 서버 사이드에서 실행되는 컨트롤 코드 부분이었습니다.워크벤치 기반 분석기 개발을 위해서는 스크립트 단위의 이벤트 프로세싱을 통해 이루어 집니다. 따라서 뷰 부분의 스크립트 단위로 코드를 개발하며, 해당 뷰 부분에서 필요로 하는 기본 코드들이 있습니다. 따라서 그에 따른 스크립트 기본 소스 코드들을 추가하는 방법을 서술하도록 하겠습니다. init.jsp 파일 생성 및 코드 입력 생성된 프로젝트 내 /html 폴더 내 init.jsp 파일을 생성합니다. 생성된 init.jsp 파일 내 뷰 개발을 위한 필요 라이브러리 코드를 추가하고 라이프레이 기본 라이브러리들을 추가합니다.추가해야 하는 코드는 아래와 같습니다. &lt;%@ taglib uri=\"http://java.sun.com/portlet_2_0\" prefix=\"portlet\" %&gt;&lt;%@ taglib uri=\"http://alloy.liferay.com/tld/aui\" prefix=\"aui\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/ui\" prefix=\"liferay-ui\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/theme\" prefix=\"theme\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/security\" prefix=\"liferay-security\" %&gt;&lt;%@ taglib uri=\"http://liferay.com/tld/portlet\" prefix=\"liferay-portlet\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\"%&gt;&lt;!-- JQuery --&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery-ui.min.js\" &gt;&lt;/script&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery.blockUI.js\" &gt;&lt;/script&gt;&lt;link type=\"text/css\" href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/jquery-ui.css\" rel=\"stylesheet\" /&gt;&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"&lt;%=request.getContextPath()%&gt;/css/main.css\"&gt;&lt;link href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap-toggle.min.css\" rel=\"stylesheet\"&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap-toggle.min.js\"&gt;&lt;/script&gt;&lt;!-- bootstrap --&gt;&lt;link href=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap.min.css\" rel=\"stylesheet\"&gt;&lt;script src=\"&lt;%=request.getContextPath()%&gt;/js/jquery/bootstrap.min.js\"&gt;&lt;/script&gt;&lt;portlet:defineObjects /&gt;&lt;theme:defineObjects /&gt;스크립트 라이브러리: jqueryxxx.min.js 사용 (워크벤치 시스템과 충돌) 스크립트 라이브러리 충돌이 나서 워크벤치 시뮬레이션이 동작하지 않을 수 있습니다. 따라서 jqery 스크립트를 비롯한 대부분의 스크립트 파일은 init.jsp 파일에 추가하지 마시기 바랍니다. 하지만 JQuery 스크립트는 플랫폼에 설치되어 있으니 라이브러리를 사용할 수 있습니다. 워크벤치 연동을 위한 CSS 설정 main.css 파일에서 osp-analyzer.css파일을 호출합니다. @import url(\"./osp-analyzer.css\");osp-analyzer.css파일을 main.css파일과 같은 폴더(/css)안에 추가합니다.osp-analyzer.css 스타일 코드는 아래와 같습니다. .osp-analyzer {\tborder:none;\theight: 100%;   \tmin-height:800px;   \tmargin: 0;}.osp-analyzer .header{\theight: 40px;\tmargin:10px 5px 10px 5px;}.osp-analyzer .header [class*=\"col-\"]{\tpadding-left: 0;\tpadding-right: 0;}.osp-analyzer .no-header-frame{\tvertical-align:middle;\tborder:none;\theight: 100%;}.osp-analyzer .frame{\tvertical-align:middle;\tborder:none;\theight: 90%;}.osp-analyzer .canvas {   \tborder:none;   \theight:100%;   \tmargin:0;   \tpadding:0;   \toverflow:auto;}.osp-analyzer .iframe-canvas {   \tborder:none;   \theight:100%;   \tmargin:0;   \tpadding:0;   \toverflow:hidden;}.osp-analyzer .icon-menu {  font-size: 15px;  color: #5cb2d7;  border: 2px solid;  border-radius: 3px;  padding-left: 2px;  padding-right: 3px;  vertical-align: middle;}.osp-analyzer .hidden {\tdisplay: none;}jsp 파일 뷰와 분석기 호출부 처리 기본 워크벤치 연동을 위한 이벤트 처리를 하는 jsp 파일(testview.jsp)과 실제 분석하는 부분을 사용자에게 서비스하고 데이터를 가시화하여 제공하는 부분의 jsp 파일(loadAnalyzer.jsp)를 프로젝트 내 생성하여 데이터를 처리한다. 파일명은 임의로 설정할 수 있지만 portlet.xml 파일에서 설정을 잘 잡아주어야 합니다. 이벤트 처리를 하는 jsp 파일을 포틀릿과 연결된 초기 jsp 파라미터로 설정해 주어야 합니다. 이벤트 처리를 하는 jsp 파일의 파일명을 testview.jsp로 했다면, portlet.xml 파일의 설정은 다음과 같습니다. &lt;init-param&gt;\t&lt;name&gt;view-template&lt;/name&gt;\t&lt;value&gt;/html/testanalyzer/testview.jsp&lt;/value&gt;&lt;/init-param&gt;지금까지 설정에 따른 전체 프로젝트의 구조는 다음과 같습니다. ├AnalyzerExample-portlet/├─docroot/├──css/├───main.css├───osp-analyzer.css├──html/├───testanalyzer/├────testview.jsp├────loadAnalyzer.jsp├──js/├───main.js├──META-INF/├───MANIFEST.MF├──WEB-INF/├───lib/├────commons-beanutils.jar├────commons-collections.jar├────commons-exec-1.1.jar├────commons-fileupload.jar├────commons-io.jar├────commons-lang.jar├────SciencePlatform-hook-service.jar├───tlb/├───liferay-display.xml├───liferay-plugin-packkage.properties├───liferay-portlet.xml├───portlet.xml├───web.xml이외에 추가로 파일이 더 있을 수도 있지만 필수적으로 필요한 파일들은 위의 구조와 같으니 비교하여 체크해 보시기 바랍니다. ","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide4/",
        "teaser":null},{
        "title": "HANDSHAKE",
        "excerpt":"OSP HADNSHAKE 이벤트 초기 워크벤치를 실행하면서 필요한 편집기와 분석기 모듈들을 호출합니다. 해당 편집기와 분석기는 실행되기 전에 HANDSHAKE 이벤트를 워크벤치로부터 받아 현재 상태 및 아이디를 등록을 하게 됩니다. 해당 HANDSHAKE 등록 과정에서 편집기 또는 분석기 모듈은 워크벤치의 아이디를 등록하게 되며, 앞으로 발생되는 이벤트에 대해 이벤트를 보내고자 하는 목적지의 주소와 같은 역할을 하게 됩니다.   샘플 예제    Liferay.on(\tOSP.Event.OSP_HANDSHAKE,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif( e.targetPortlet !== myId ){\t\t\treturn\t\t}\t\tconsole.log('[NGLViewer]OSP_HANDSHAKE: ['+e.portletId+', '+new Date()+']');\t\t&lt;portlet:namespace/&gt;connector = e.portletId;\t\tif( e.mode )\t\t\t&lt;portlet:namespace/&gt;action = e.mode;\t\telse\t\t\t&lt;portlet:namespace/&gt;action = 'VIEW';\t\tvar events = [\t\t\tOSP.Event.OSP_EVENTS_REGISTERED,\t\t\tOSP.Event.OSP_LOAD_DATA\t\t];\t\tvar eventData = {\t\t\tportletId: myId,\t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector,\t\t\tdata: events      };      Liferay.fire( OSP.Event.OSP_REGISTER_EVENTS, eventData );  });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/handshake/",
        "teaser":null},{
        "title": "REGISTERED EVENT",
        "excerpt":"OSP REGISTERED 이벤트   샘플 예제    Liferay.on(  OSP.Event.OSP_EVENTS_REGISTERED,  function(e){      var myId = '&lt;%=portletDisplay.getId()%&gt;';      if(e.targetPortlet === myId){          console.log('[NGLViewer]Regestered'+e.portletId+' activated. '+new Date()+']');      }  });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/registered/",
        "teaser":null},{
        "title": "REQUEST DATA EVENT",
        "excerpt":"OSP REQUEST DATA 이벤트 사용자가 서버에 저장된 파일을 선택하거나 새로운 데이터를 로드하고자 할 때, 분석기나 편집기에서는 새로운 데이터를 요청해야 합니다. 따라서 분석기나 편집기에서는 새로운 데이터를 요청하는 이벤트를 발생시키고, 해당 이벤트를 받아 새로운 데이터를 받아오게 됩니다.   샘플 예제    Liferay.on(      OSP.Event.OSP_REQUEST_DATA,      function(e){          var myId = '&lt;%=portletDisplay.getId()%&gt;';          if( e.targetPortlet === myId ){              var iframe = document.getElementById('&lt;portlet:namespace/&gt;TBox');              var eventData = {                      portletId: myId,                      targetPortlet: e.portletId,                      data: {                          type_: OSP.Enumeration.PathType.FILE_CONTENT,                          context_: iframe.contentWindow.getParameters(),                          params: e.params                      }              }\t\t\t\t              Liferay.fire(OSP.Event.OSP_RESPONSE_DATA, eventData);          }      });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/requestdata/",
        "teaser":null},{
        "title": "RESPONSE DATA EVENT",
        "excerpt":"OSP RESPONSE DATA 이벤트   샘플 예제    Liferay.on(      OSP.Event.OSP_RESPONSE_DATA,      function( e ){          var myId = '&lt;%=portletDisplay.getId()%&gt;';          if( e.targetPortlet !== myId )\treturn;          console.log(\"[ATOM EDITOR] OSP OSP_RESPONSE_DATA :\", e );          var iframe = document.getElementById('&lt;portlet:namespace/&gt;TBox');          var filePath = new OSP.InputData( e.data );          if( filePath.type() !== OSP.Enumeration.PathType.FILE ){              alert('File Name is not available. Choose another one.');              return;          }          if( !&lt;portlet:namespace/&gt;saveAction ){              &lt;portlet:namespace/&gt;loadText( filePath, true );              $&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog('close');          }          else{              $('#&lt;portlet:namespace/&gt;uploadFileName').val(filePath.name());              filePath.type( OSP.Enumeration.PathType.FILE_CONTENT );              filePath.context( iframe.contentWindow.getParameters() );              $.ajax({                  url: '&lt;%=serveResourceURL.toString()%&gt;',                  type: 'POST',                  dataType: 'json',                  data:{                      &lt;portlet:namespace/&gt;command: \"CHECK_DUPLICATED\",                      &lt;portlet:namespace/&gt;repositoryType: filePath.repositoryType(),                      &lt;portlet:namespace/&gt;parentPath: filePath.parent(),                      &lt;portlet:namespace/&gt;fileName: filePath.name()                  },                  success: function(result){                      var duplicated = result.duplicated;                      if( duplicated ){                          var confirmDialog = $('#&lt;portlet:namespace/&gt;confirmDialog');                          confirmDialog.dialog(                                  {                                      resizable: false,                                      height: \"auto\",                                      width: 400,                                      modal: true,                                      buttons: {                                              'OK': function() {                                                          $( this ).dialog( 'destroy' );                                                          &lt;portlet:namespace/&gt;saveContentAs ( filePath );                                                          $&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog('close');                                              },                                              Cancel: function() {                                                          $( this ).dialog( 'destroy' );                                              }                                      }                                  }                          );                      }                      else{                          &lt;portlet:namespace/&gt;saveContentAs ( filePath );                          $&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog('close');                      }                  },                  error: function( e, d ){                      console.log(' [ATOM EDITOR] file save error', e, d);                  }              });          }      });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/responsedata/",
        "teaser":null},{
        "title": "LOAD DATA EVENT",
        "excerpt":"OSP LOAD DATA 이벤트 편집기 또는 분석기에서 데이터를 로드할 때 사용되는 이벤트로, 서버에 저장되어 있는 파일을 로드하거나 시뮬레이션 결과 데이터를 로드할 때 쓰이는 이벤트입니다. 사용자가 서버쪽 파일을 선택하거나 시뮬레이션이 성공적으로 종료되는 상황에서 워크벤치에서 이벤트를 발생시키며, 이벤트 데이터 내 파일 경로에 따라 파일을 읽어 들이는 프로세스를 거쳐 사용자에게 보여줍니다.   샘플 예제    Liferay.on(  'OSP_LOAD_DATA',  function(e){      var myId = '&lt;%=portletDisplay.getId()%&gt;';      console.log(\"[ATOM EDITOR] OSP LOAD DATA :\", myId, e.targetPortlet );      if( e.targetPortlet !== myId )\treturn;      &lt;portlet:namespace/&gt;initData = e.data;      if( ! &lt;portlet:namespace/&gt;initData.repositoryType_){          &lt;portlet:namespace/&gt;initData.repositoryType_ = 'USER_HOME';      }      &lt;portlet:namespace/&gt;loadEPDEditor( OSP.Util.toJSON(&lt;portlet:namespace/&gt;initData) );      &lt;portlet:namespace/&gt;initializeFileExplorer();  });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/loaddata/",
        "teaser":null},{
        "title": "INITIAIZE EVENT",
        "excerpt":"OSP INITIAIZE 이벤트 워크벤치가 실행된 이후, 초기화 값을 셋팅하는 이벤트 입니다. 워크벤치가 실행되고 시뮬레이션 실행 환경이 구성되고 난 뒤, 각 편집기나 분석기에서는 필요한 값들의 초기화를 진행하는데 이 때 사용되는 이벤트입니다.   샘플 예제    Liferay.on(  'OSP_INITIALIZE',  function(e){      var myId = '&lt;%=portletDisplay.getId()%&gt;';      if( e.targetPortlet !== myId )\treturn;      &lt;portlet:namespace/&gt;initializeFileExplorer();  });      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/initialize/",
        "teaser":null},{
        "title": "REQUEST OUTPUT VIEW EVENT",
        "excerpt":"OSP REQUEST OUTPUT VIEW 이벤트   샘플 예제    Liferay.on(      OSP.Event.OSP_REFRESH_OUTPUT_VIEW,      function(e){          var myId = '&lt;%=portletDisplay.getId()%&gt;';          if( myId !== e.targetPortlet ) return;          var eventData = {                  portletId: '&lt;%=portletDisplay.getId()%&gt;',                  targetPortlet: &lt;portlet:namespace/&gt;connector          };          Liferay.fire(OSP.Event.OSP_REQUEST_OUTPUT_PATH, eventData);      });      ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/workbench/event/requestoutputview/",
        "teaser":null},{
        "title": "REQUEST DATA CHANGED EVENT",
        "excerpt":"OSP DATA CHANGED 이벤트 해당하는 포틀릿이 편집기인 경우, 사용자의 입력을 받게 됩니다. 사용자의 입력을 받아 입력 데이터가 변경되게 되면 해당 데이터의 변경을 워크벤치에 알려야 합니다.따라서 사용자의 입력에 따라 변경된 데이터를 JSON의 형태로 이벤트를 발생시켜 워크벤치에 전달합니다.   샘플 예제    function &lt;portlet:namespace/&gt;fireTextChangedEvent( data ){      &lt;portlet:namespace/&gt;ViewStructure();      var inputData = new OSP.InputData();      inputData.type( OSP.Enumeration.PathType.FILE_CONTENT );      if( $.isEmptyObject(&lt;portlet:namespace/&gt;initData) ){          inputData.repositoryType('&lt;%=OSPRepositoryTypes.USER_HOME.toString()%&gt;');      }      else if( &lt;portlet:namespace/&gt;initData.repositoryType_ ){          console.log(\"[ATOM EDITOR] test re[psotpry Type]]\", &lt;portlet:namespace/&gt;initData);          inputData.repositoryType(&lt;portlet:namespace/&gt;initData.repositoryType_);      }      else{          inputData.repositoryType('&lt;%=OSPRepositoryTypes.USER_HOME.toString()%&gt;');      }      inputData.context( data );      var eventData = {           \t\t\tportletId: '&lt;%=portletDisplay.getId()%&gt;',           \t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector,           \t\t\tdata: OSP.Util.toJSON(inputData)      };      Liferay.fire( OSP.Event.OSP_DATA_CHANGED, eventData );}      ","categories": ["event"],
        "tags": ["workbench","event"],
        "url": "http://localhost:4000/workbench/event/datachanged/",
        "teaser":null},{
        "title": "분석기 구조 설명",
        "excerpt":"EDISON 플랫폼에서 워크벤치와 연동되는 분석기는 모듈 단위로 개발 될 수 있으며, 각 모듈은 Liferay 포틀릿으로 구분됩다.각 포틀릿에서 생성된 가시화 및 서비스 등은 EDISON 플랫폼에서 제공되는 서비스와 연동되어 개발될 수 있습니다. 분석기와 EDISON 연동 시스템 구조 EDSION 워크벤치 시뮬레이션 시스템과 연동되는 시스템 구조는 다음 그림과 같이 표현될 수 있습니다.  분석기는 전체 이벤트를 처리하는 이벤트 처리부분과 내부적으로 데이터를 가시화하고 분석 할 수 있는 Analyzer 구현 부분으로 나눠질 수 있습니다. EDISON 플랫폼에서 파생되는 이벤트를 받아들이고 적절한 시기에 사용자에게 데이터 분석을 위한 툴을 제공하는 부분을 포함하고 있습니다. 따라서 EDISON 워크벤치와 연동되는 분석기 모듈을 개발하기 위해서는 이벤트를 처리하는 부분과 실제 데이터 가시활르 위한 부분을 나눠서 개발을 해야 합니다. 분석기 이벤트 처리 부분 워크벤치의 분석기를 개발 하는데 있어 이벤트를 처리하는 부분은 자바 스크립트로 이루어져 있으며, Liferay 포틀릿 기반으로 이벤트를 받아들입니다. 다음 예제 코드는 워크벤치가 실행되면서 분석기를 호출하고 이에 대한 응답을 하는 코드입니다.Liferay 에서 제공하는 Liferay.fire()함수와 Liferay.on()기반으로 이벤트 프로세싱을 제공합니다.   샘플 예제    Liferay.on(\tOSP.Event.OSP_HANDSHAKE,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif( e.targetPortlet !== myId ){\t\t\treturn\t\t}\t\tconsole.log('[NGLViewer]OSP_HANDSHAKE: ['+e.portletId+', '+new Date()+']');\t\t&lt;portlet:namespace/&gt;connector = e.portletId;\t\tif( e.mode )\t\t\t&lt;portlet:namespace/&gt;action = e.mode;\t\telse\t\t\t&lt;portlet:namespace/&gt;action = 'VIEW';\t\tvar events = [\t\t\tOSP.Event.OSP_EVENTS_REGISTERED,\t\t\tOSP.Event.OSP_LOAD_DATA\t\t];\t\tvar eventData = {\t\t\tportletId: myId,\t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector,\t\t\tdata: events      };      Liferay.fire( OSP.Event.OSP_REGISTER_EVENTS, eventData );  });        Liferay.fire() : 이벤트를 발생시키는 Liferay 자바스크립트 라이브러리 함수입니다.  Liferay.on() : 이벤트를 리스닝 하는 Liferay 자바스크립트 라이브러리 함수입니다.데이터 처리 부분 실제 서버에서 계산과학공학 시뮬레이션이 실행되고 결과 값을 분석하기 위해서는 시뮬레이션 결과를 호출하고 적절한 데이터를 받아 가시화 하는 데이터 처리 구현 부분입니다.계산 결과 데이터를 수신하고 가시화 하기 위해서는 데이터 호출 및 응답에 대한 코드 구현이 필수적입니다. 이미 이전 단계에서 추가한 OSP 라이브러리를 기반으로 데이터를 호출하고 적절한 데이터를 받는 코드 부분이 구현 되어야 합니다. 이러한 데이터를 구현하기 위해서는 다양한 스크립트 함수들이 필요하며, 해당 함수들을 순차대로 정리하면 다음과 같습니다. 데이터 처리를 위해 정의가 필요한 함수             함수명      정의                  loadXXXXFile(OSPInputData)      실제 서버 사이드의 파일을 읽어오는 방법에 대한 정의Output 포트의  path  타입에 따라 케이스를 나눠 처리 방법에 대한 정의가 되어 있음 폴더/확장자/파일              getFirstFileName(OSPInputData)      결과 포트의 path  타일이 폴더 또는 확장자인 경우, 해당 폴더 내 첫번째 파일을 읽어오는 역할이 정의      데이터 처리 방법  서버에서 시뮬레이션 결과로 생성된 결과 데이터는 OSP 라이브러리를 이용하여 전송받을 수 있으며, 해당 데이터를 받은 다음 iframe 으로 연결된 실제 데이터 가시봐 부분에 데이터를 전공하는 방법으로 분석기가 동작하게 됩니다. ","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide4/",
        "teaser":null},{
        "title": "초기값 설정",
        "excerpt":"EDISON 워크벤치와 연동을 하며 워크벤치에서 요구하는 이벤트를 처리하기 위해서는 기본적으로 셋팅이 완료되어야 하는 몇 가지 초기 값이 있습니다. 데이터 전송 및 라이브러리 사용 다음은 데이터 전송 및 기타 라이브러리들을 사용하기 위한 기본 코드 입니다.testview.jsp파일 내부에 제일 위쪽 부분에 해당 라이브러리 호출 부분을 포함합니다. &lt;%@page import=\"com.kisti.osp.constants.OSPRepositoryTypes\"%&gt;&lt;%@page import=\"com.liferay.portal.kernel.util.GetterUtil\"%&gt;&lt;%@page import=\"com.liferay.portal.util.PortalUtil\"%&gt;&lt;%@page import=\"com.liferay.portal.kernel.portlet.LiferayWindowState\"%&gt;&lt;%@page import=\"javax.portlet.PortletPreferences\"%&gt;&lt;%@include file=\"../init.jsp\"%&gt;라이프레이 URL 추가 라이프레이 데이터 전송 방식을 사용하기 위한 URL을 추가합니다. 데이터 전송을 위한 Liferay 포틀릿의 URL은 resourceURL입니다. &lt;portlet:resourceURL var=\"serveResourceURL\"&gt;&lt;/portlet:resourceURL&gt;&lt;portlet:renderURL var=\"renderURL\"&gt;    &lt;portlet:param name=\"jspPage\" value=\"/html/testanalyzer/testview.jsp\"/&gt;&lt;/portlet:renderURL&gt;초기 데이터 셋팅을 위한 코드 추가 워크벤치와 연동외어 동작하기 위해 필요한 기본값들의 초기 셋팅 값입니다.이벤트 처리를 하는 워크벤치와 연동을 할 것인지 아니면 독립적으로 사용자에게 제공되어 동작할 것인지 호출하고 세팅하는 값이 포함되어 있습니다. &lt;%PortletPreferences preferences = portletDisplay.getPortletSetup();preferences.setValue(\"portletSetupShowBorders\", String.valueOf(Boolean.FALSE));preferences.store();String inputData = GetterUtil.getString(renderRequest.getAttribute(\"inputData\"), \"{}\");String connector = (String)renderRequest.getAttribute(\"connector\");String mode = GetterUtil.getString(renderRequest.getAttribute(\"mode\"), \"VIEW\");boolean eventEnable = GetterUtil.getBoolean(renderRequest.getAttribute(\"eventEnable\"), true);%&gt;가시화 태그 워크벤치의 분석기를 개발 하는데 있어 이벤트를 처리하는 부분은 자바 스크립트로 이루어져 있으며, Liferay 포틀릿 기반으로 이벤트를 받아들입니다. 다음 예제 코드는 워크벤치가 실행되면서 분석기를 호출하고 이에 대한 응답을 하는 코드입니다.Liferay 에서 제공하는 Liferay.fire()함수와 Liferay.on()기반으로 이벤트 프로세싱을 제공합니다.   샘플 예제    Liferay.on(\tOSP.Event.OSP_HANDSHAKE,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif( e.targetPortlet !== myId ){\t\t\treturn\t\t}\t\tconsole.log('[NGLViewer]OSP_HANDSHAKE: ['+e.portletId+', '+new Date()+']');\t\t&lt;portlet:namespace/&gt;connector = e.portletId;\t\tif( e.mode )\t\t\t&lt;portlet:namespace/&gt;action = e.mode;\t\telse\t\t\t&lt;portlet:namespace/&gt;action = 'VIEW';\t\tvar events = [\t\t\tOSP.Event.OSP_EVENTS_REGISTERED,\t\t\tOSP.Event.OSP_LOAD_DATA\t\t];\t\tvar eventData = {\t\t\tportletId: myId,\t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector,\t\t\tdata: events      };      Liferay.fire( OSP.Event.OSP_REGISTER_EVENTS, eventData );  });        Liferay.fire() : 이벤트를 발생시키는 Liferay 자바스크립트 라이브러리 함수입니다.  Liferay.on() : 이벤트를 리스닝 하는 Liferay 자바스크립트 라이브러리 함수입니다.","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide5/",
        "teaser":null},{
        "title": "파일 탐색기 설정",
        "excerpt":"파일 메뉴 설정 기본적으로 분석기를 EDISON 워크벤치와 연동을 하면서 필요한 파일 메뉴는 3가지 입니다. 현재 대부분의 워크벤치와 연동된 파일 메뉴는 로컬 파일 불러오기, 서버 파일 불러오기, 현재 파일 다운로드하기 가 있습니다.이러한 파일 메뉴와 더불어 실제 파일을 불러와 가시화하는 가시화 부분을 호출하는 iframe도 같이 포함하여 정의합니다. 이러한 파일 메뉴는 이전 포스트에서 설정되어 있는 osp-analyzer.css에서 정의되어 있는 스타일을 사용합니다. 다음은 파일 메뉴를 설정하기 위한 html 태그 코드입니다. &lt;div class=\"container-fluid osp-analyzer\"&gt;\t&lt;div class=\"row-fluid header\"&gt;\t\t&lt;div class=\"col-sm-10\" id=\"&lt;portlet:namespace/&gt;title\"&gt;&lt;/div&gt;\t\t&lt;div class=\"col-sm-2\" &gt;\t\t\t&lt;div class=\"dropdown\"&gt;\t\t\t\t&lt;button class=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\"&gt;\t\t\t\t\tMenu&lt;span class=\"caret\"&gt;&lt;/span&gt;\t\t\t\t&lt;/button&gt;\t\t\t\t&lt;!-- Link or button to toggle dropdown --&gt;\t\t\t\t&lt;ul class=\"dropdown-menu dropdown-menu-right\"&gt;\t\t\t\t\t&lt;li &gt;&lt;a href=\"javascript:$('#&lt;portlet:namespace/&gt;selectFile').click();\"&gt;&lt;i class=\"icon-folder-open\"&gt; Open local...&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\t\t\t\t\t&lt;li&gt;&lt;a href=\"javascript:&lt;portlet:namespace/&gt;openFileExplorer();\"&gt;&lt;i class=\"icon-folder-open\"&gt; Open server...&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\t\t\t\t\t&lt;li&gt;&lt;a href=\"javascript:&lt;portlet:namespace/&gt;downloadCurrentFile();\"&gt;&lt;i class=\"icon-download-alt\"&gt; Download&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\t\t\t\t&lt;/ul&gt;\t\t\t&lt;/div&gt;\t\t&lt;/div&gt;\t&lt;/div&gt;\t&lt;div class=\"row-fluid canvas\" id=\"&lt;portlet:namespace/&gt;canvasFrame\"&gt;\t\t&lt;iframe class =\"col-sm-12 iframe-canvas\" id=\"&lt;portlet:namespace/&gt;canvas\"  src=\"&lt;%=request.getContextPath()%&gt;/html/testanalyzer/loadAnalyzer.jsp\" style=\"border:0\"&gt;\t\t&lt;/iframe&gt;\t&lt;/div&gt;&lt;/div&gt;파일 다이얼로그 추가 서버와 연동되는 파일 처리를 위한 서버 파일 리스트를 볼 수 있는 다이얼로그를 띄울 수 있는 태그를 추가합니다. 또한 서버의 파일 리스트를 볼 수 있는 서버 파일 탐색기를 호출하게 됩니다. 이 서버 사이드 파일 탐색기는 EDISON 플랫폼에 탑재되어 있으며, 분석기를 개발하려면 호출하기만 하면 됩니다. 호출하는 함수는 OSPFileExplorerportlet로서 자바스크립트로 정의되어 있습니다. &lt;div id=\"&lt;portlet:namespace/&gt;hiddenSection\" class=\"osp-analyzer hidden\"&gt;\t&lt;div id=\"&lt;portlet:namespace/&gt;fileExplorer\" class=\"panel panel-primary ui-draggable\" style=\"padding:0px;margin-bottom:0px;\"&gt;\t\t&lt;!-- title --&gt;\t\t&lt;div class=\"panel-heading\"&gt;\t\t\t&lt;button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\" id='&lt;portlet:namespace/&gt;closeDialog'&gt;&amp;times;&lt;/button&gt;\t\t\t&lt;h4&gt;Select a File&lt;/h4&gt;\t\t&lt;/div&gt;\t\t&lt;!-- content --&gt;\t\t&lt;div class=\"panel-body\" id=\"&lt;portlet:namespace/&gt;file-explorer-content\" style=\"height: 81%\"&gt;&lt;/div&gt;\t\t&lt;!-- bottom --&gt;\t\t&lt;div class=\"panel-footer\"&gt;\t\t\t&lt;div class=\"ui-dialog-buttonset\"&gt;\t\t\t\t&lt;input class=\"btn btn-primary\" id=\"&lt;portlet:namespace/&gt;file-explorer-ok\" type=\"button\" value=\"OK\"&gt;\t\t\t\t&lt;input class=\"btn\" id=\"&lt;portlet:namespace/&gt;file-explorer-cancel\" type=\"button\" value=\"Cancel\"&gt;\t\t\t&lt;/div&gt;\t\t&lt;/div&gt;\t&lt;/div&gt;\t&lt;input type=\"file\" id=\"&lt;portlet:namespace/&gt;selectFile\"/&gt;&lt;/div&gt;파일 메뉴 이벤트 처리   로컬 파일 처리 함수$('#&lt;portlet:namespace/&gt;selectFile').bind(\t'change',\tfunction(event){\t\tvar input = document.getElementById('&lt;portlet:namespace/&gt;selectFile');\t\tvar reader = new FileReader();\t\treader.onload = function (e) {\t\t\t$('#&lt;portlet:namespace/&gt;canvas').each(function(){\t\t\t\t$(this).prop('contentWindow').loadJSMolFile(e.target.result);\t\t\t});\t        console.log(\"[JSMOL] local file test : \", input);\t\t\tconsole.log(\"[JSMOL] local file test2 : \", input.files[0]);\t\t\t&lt;portlet:namespace/&gt;setTitle(input.files[0].name);\t\t};\t\treader.readAsDataURL(input.files[0]);\t});  서버 파일 처리 함수initializeFileExplorer 함수는 서버 파일 탐색기를 호출하기 위해 초기값을 설정하는 코드입니다.function &lt;portlet:namespace/&gt;initializeFileExplorer(){if( $.isEmptyObject(&lt;portlet:namespace/&gt;initData) ||(  &lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.FILE &amp;&amp;  &lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.FOLDER &amp;&amp;  &lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.EXT ))\treturn;var eventData = {            portletId: '&lt;%=portletDisplay.getId()%&gt;',            targetPortlet: &lt;portlet:namespace/&gt;fileExplorerId,            data: OSP.Util.toJSON(&lt;portlet:namespace/&gt;initData)};Liferay.fire( 'OSP_LOAD_DATA', eventData );}openFileExplorer함수는 사용자가 서버 파일 오픈 메뉴를 선택하였을 때, 다이얼로그형태로 사용자에게 서버쪽 파일 리스트를 탐색한 내용을 업데이트 하여 보여주는 함수 부분입니다. function &lt;portlet:namespace/&gt;openFileExplorer(){\tAUI().use('liferay-portlet-url', function(A){\t\tif($(\"#&lt;portlet:namespace/&gt;file-explorer-content\").children().length &gt; 0){\t\t\t$&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog(\"open\");\t\t}else{\t\t\tvar inputData;\t\t\tif(\t!$.isEmptyObject(&lt;portlet:namespace/&gt;initData) &amp;&amp; (\t\t\t\t&lt;portlet:namespace/&gt;initData.type() === OSP.Enumeration.PathType.FILE ||\t\t\t\t&lt;portlet:namespace/&gt;initData.type() === OSP.Enumeration.PathType.FOLDER ||\t\t\t\t&lt;portlet:namespace/&gt;initData.type() === OSP.Enumeration.PathType.EXT )){\t\t\t\tinputData = &lt;portlet:namespace/&gt;initData;\t\t\t}\t\t\telse{\t\t\t\tinputData = new OSP.InputData();\t\t\t\tinputData.repositoryType( '&lt;%=OSPRepositoryTypes.USER_HOME.toString()%&gt;' );\t\t\t\tinputData.type( OSP.Enumeration.PathType.FOLDER );\t\t\t\tinputData.parent('');\t\t\t\tinputData.name('');\t\t\t}\t\t\tvar dialogURL = Liferay.PortletURL.createRenderURL();\t\t\tdialogURL.setPortletId(&lt;portlet:namespace/&gt;fileExplorerId);\t\t\tdialogURL.setParameter('inputData', JSON.stringify(inputData));\t\t\tdialogURL.setParameter('mode', 'VIEW');\t\t\tdialogURL.setParameter('eventEnable', false);\t\t\tdialogURL.setParameter('connector', '&lt;%=portletDisplay.getId()%&gt;');\t\t\tdialogURL.setWindowState('&lt;%=LiferayWindowState.EXCLUSIVE%&gt;');\t\t\t$(\"#&lt;portlet:namespace/&gt;file-explorer-content\").load( dialogURL.toString());\t\t\t$&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog(\"open\");\t\t}\t});}  현재 파일 다운로드현재 선택되어 있는 파일을 다운로드 하는 함수입니다.function &lt;portlet:namespace/&gt;downloadCurrentFile(){console.log(\"[testView] Download current data\", &lt;portlet:namespace/&gt;currentData);if( $.isEmptyObject(&lt;portlet:namespace/&gt;currentData) ||  &lt;portlet:namespace/&gt;currentData.type() !== OSP.Enumeration.PathType.FILE )  return;var filePath = &lt;portlet:namespace/&gt;currentData;var data = {  &lt;portlet:namespace/&gt;command: \"DOWNLOAD_FILE\",  &lt;portlet:namespace/&gt;pathType: filePath.type_,  &lt;portlet:namespace/&gt;repositoryType: filePath.repositoryType_,  &lt;portlet:namespace/&gt;parentPath: filePath.parent_,  &lt;portlet:namespace/&gt;fileName: filePath.name_};var base = '&lt;%=serveResourceURL.toString()%&gt;';var sep = (base.indexOf('?') &gt; -1) ? '&amp;' : '?';var url = base + sep + $.param(data);location.href = url;&lt;portlet:namespace/&gt;loadXXXXFile( &lt;portlet:namespace/&gt;currentData );}","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide6/",
        "teaser":null},{
        "title": "이벤트 처리 함수",
        "excerpt":"이벤트 처리 개발하려는 분석기는 Liferay 에서 제공하는 이벤트 전송 및 수신 함수(Liferay.on(), Liferay.fire())를 사용하여 워크벤치와 연동하여 동작합니다. 자바 스크립트 단위로 동작을 하기 때문에 개발하려는 분석기 내에 필요한 이벤트를 처리하고 발생시키는 루틴을 넣어야 합니다. 분석기에서 사용되는 이벤트의 종류와 설명은 아래와 같습니다.             이벤트명      정의                  OSP.Event.OSP_HANDSHAKE      초기 워크벤치에 해당 모듈을 등록 하고 초기 설정값을 워크벤치로 부터 받을 때 쓰는 이벤트              OSP.Event.OSP_Event_REGISTERED      초기 OSP_HANDSHAKE에 대한 워크벤치의 결과 응답 이벤트              OSP.Event.OSP_LOAD_DATA      특정 위치와 파일에 대한 데이터 로드 이벤트              OSP.Event.OSP_RESPONSE_DATA      사용자가 파일 익스플로러에서 선택한 파일에 대한 응답 이벤트              OSP.Event.OSP_REFRESH_OUTPUT_VIEW      포틀릿 아이디 공유를 위한 이벤트              OSP.Event.OSP_INITIALIZE      워크벤치에서 보내는 초기화 값 설정을 위한 이벤트      이벤트처리함수  일단 개발하려는 분석기가 동작하기 위해서는 위의 이벤트를 워크벤치로부터 받아서 처리하는 루틴이 필수적으로 필요합니다. 따라서 기본으로 해당 이벤트를 처리하는 코드를 작성하고 나머지 가시화 및 분석을 위한 코드를 추가하는 것이 좋습니다. OSP.Event.OSP_HANDSHAKE 처음 워크벤치가 실행되면서 각 포틀릿에게 OSP.Event.OSP_HANDSHAKE이벤트를 보내게 됩니다. 따라서 워크벤치와 연동되는 분석기를 개발하기 위해서는 OSP.Event.OSP_HANDSHAKE 이벤트를 받아서 다시 워크벤치에게 전달하는 루틴이 필요합니다.아래 코드에서 볼 수 있듯이, OSP.Event.OSP_HANDSHAKE이벤트를 받아들이고 현재 동작중인 분석기를 워크벤치에 등록시키는 과정을 포함합니다. Liferay.on(  \tOSP.Event.OSP_HANDSHAKE,  \tfunction(e){  \t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';  \t\tif( e.targetPortlet !== myId ){  \t\t\treturn  \t\t}  \t\t&lt;portlet:namespace/&gt;connector = e.portletId;  \t\tif( e.mode )  \t\t\t&lt;portlet:namespace/&gt;action = e.mode;  \t\telse  \t\t\t&lt;portlet:namespace/&gt;action = 'VIEW';  \t\tvar events = [  \t\t\tOSP.Event.OSP_EVENTS_REGISTERED,  \t\t\tOSP.Event.OSP_LOAD_DATA  \t\t];  \t\tvar eventData = {  \t\t\tportletId: myId,  \t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector,  \t\t\tdata: events\t\t};\t\tLiferay.fire( OSP.Event.OSP_REGISTER_EVENTS, eventData );\t});OSP.Event.OSP_Event_REGISTERED OSP_HANDSHAKE 이벤트의 결과에 대한 이벤트입니다. 간단하게 이벤트를 받아들여 체크하는 정도의 코드만 추가하면 됩니다. Liferay.on(\tOSP.Event.OSP_EVENTS_REGISTERED,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif(e.targetPortlet === myId){\t\t\tconsole.log('[TestView]Regestered'+e.portletId+' activated. '+new Date()+']');\t\t}\t});OSP.Event.OSP_LOAD_DATA 데이터를 로드하기 위한 함수입니다. 워크벤치를 기반으로 하여 시뮬레이션을 수행하는데 있어, 시뮬레이션이 성공적으로 종료되었거나 이전에 실행한 성공한 시뮬레이션 잡의 결과 데이터를 가져오기 위한 이벤트 처리 부분 입니다. 워크벤치에서 데이터를 로드라하고 이벤트를 발생시키고, 해당 이벤트를 받아 분석기에서는 데이터를 로드하여 분석할 수 있도록 시각화를 하면 됩니다.   &lt;portlet:namespace/&gt;initialize(e.data);에서는 초기 데이터 셋팅 값을 받은 이벤트 데이터를 기반으로 설정합니다.  &lt;portlet:namespace/&gt;loadTestviewFile(&lt;portlet:namespace/&gt;initData.clone());코드는 실제 데이터를 가져와 가시화를 하기 위한 코드입니다.  &lt;portlet:namespace/&gt;initializeFileExplorer();코드는 현재 받은 이벤트 데이터를 기반으로 서버와 연결된 파일 익스프로러의 값을 재설정 하는 부분입니다.Liferay.on(\tOSP.Event.OSP_LOAD_DATA,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif( e.targetPortlet !== myId )\t\t\treturn;\t\t&lt;portlet:namespace/&gt;initialize(e.data);\t\t&lt;portlet:namespace/&gt;loadTestviewFile(&lt;portlet:namespace/&gt;initData.clone());\t\t&lt;portlet:namespace/&gt;initializeFileExplorer();\t});OSP.Event.OSP_RESPONSE_DATA 사용자가 서버와 연동된 파일 익스플로러에서 선택한 파일에 대한 응답 이벤트 코드입니다. 사용자가 파일을 선택하면 해당 파일 데이터를 읽어오기 위한 이벤트 처리 부분입니다. Liferay.on(\tOSP.Event.OSP_RESPONSE_DATA,\tfunction( e ){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif( myId !== e.targetPortlet ) return;\t\tvar inputData = new OSP.InputData( e.data );\t\tif( inputData.type() !== OSP.Enumeration.PathType.FILE ){\t\t\talert( 'File should be selected!' );\t\t\treturn;\t\t}else{\t\t\t&lt;portlet:namespace/&gt;loadTestviewFile( inputData );\t\t\t$&lt;portlet:namespace/&gt;fileExplorerDialogSection.dialog('close');\t\t}\t}\t\t);OSP.Event.OSP_REFRESH_OUTPUT_VIEW 포틀릿의 아이디를 공유하기 위한 이벤트 처리 부분입니다. Liferay.on(\t\tOSP.Event.OSP_REFRESH_OUTPUT_VIEW,\t\tfunction(e){\t\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\t\tif( myId !== e.targetPortlet ) return;\t\t\tvar eventData = {\t\t\t\t\tportletId: '&lt;%=portletDisplay.getId()%&gt;',\t\t\t\t\ttargetPortlet: &lt;portlet:namespace/&gt;connector\t\t\t};\t\t\tLiferay.fire(OSP.Event.OSP_REQUEST_OUTPUT_PATH, eventData);\t\t});OSP.Event.OSP_INITIALIZE 처음 HANDSHAKE 이벤트를 처리하면서 내부저긍로 서버와 연동된 파일 익스플로러를 초기화 시키는 코드입니다. Liferay.on(\tOSP.Event.OSP_INITIALIZE,\tfunction(e){\t\tvar myId = '&lt;%=portletDisplay.getId()%&gt;';\t\tif(myId !== e.targetPortlet) return;\t\tif( $.isEmptyObject(&lt;portlet:namespace/&gt;initData) )\treturn;\t\t&lt;portlet:namespace/&gt;initializeFileExplorer( &lt;portlet:namespace/&gt;initData.clone() );\t});","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide7/",
        "teaser":null},{
        "title": "공용 함수",
        "excerpt":"공용함수 이벤트에 대한 응답이나 데이터를 처리하고 실제 가시화를 하기 위한 공용 함수들이 필요합니다. 예를 들어 워크벤치와 연동되어 시뮬레이션을 수행할 때, 시뮬레이션이 종료되고 결과를 확인하기 위해서는 워크벤치에서 데이터를 로드하라는 OSP_LOAD_DATA 이벤트를 분석기에 보내게 됩니다. 해당 이벤트를 해석하고 데이터를 로드하는 함수를 정의하고 로드된 데이터를 통해 시뮬레이션 분석을 위한 가시화를 진행할 수 있습니다. 따라서 데이터를 처리하고 파일을 분석하는 내용에 대한 공용 함수를 정의합니다. 분석기에서 사용되는 함수의 종류와 설명은 아래와 같습니다.             함수명      정의                  loadXXXXXXFile(OSPInputData)      실제 서버쪽의 파일을 읽어오는 방법에 대한 정의Output 포트의 path 타입에 따라 케이스를 나누고 처리 방법에 대한 정의가 되어 있음              getFirstFileName(OSPInputData)      Output 포트의 파일 타입이 폴더이거나 확장자일 경우 해당 결과 result 폴더에서 첫 번 째 파일을 읽어오도록 정의              drawXXXXXXView()      서버와 연동되어서 선택된 파일을 실제 뷰 부분의 iframe 내부로 전달하여 가시화 함              initializeFileExplorer()      서버와 연결된 파일 익스플로러 초기값 설정              DownloadCurrentFile()      현재 사용자가 파일 익스플로러에서 선택한 파일을 다운로드      loadXXXXXXFile(OSPInputData) function &lt;portlet:namespace/&gt;loadTestviewFile( inputData ){\t&lt;portlet:namespace/&gt;currentData = inputData;\tconsole.log(\"[testView] Load Data : input Data \", inputData);\tswitch( inputData.type() ){\tcase OSP.Enumeration.PathType.FILE:\t    &lt;portlet:namespace/&gt;drawView( inputData );\t\tbreak;\tcase OSP.Enumeration.PathType.FOLDER:\tcase OSP.Enumeration.PathType.EXT:\t    &lt;portlet:namespace/&gt;getFirstFileName( inputData );\t    // serveResourceUrl.setParameter('command', 'READ_FIRST_FILE');\t\tbreak;\tcase OSP.Enumeration.PathType.URL:\t\talert('Un supported yet.'+inputData.type());\t\tbreak;\tdefault:\t\talert('Un supported yet.'+inputData.type());\t}}drawXXXXXXView() function &lt;portlet:namespace/&gt;drawView( inputData ){    setTimeout(\t    function(){\t    \tvar iframe = document.getElementById('&lt;portlet:namespace/&gt;canvas');\t    \tvar iframeDoc = iframe.contentDocument || iframe.contentWindow.document;\t    \tconsole.log( '[testView]iframeDoc.readyState : ', iframeDoc.readyState);\t    \tif (  iframeDoc.readyState  == 'complete' &amp;&amp; iframe.contentWindow.drawTestViewer ) {\t    \t\tconsole.log(\"[testView]  Load data in draw\");\t    \t    AUI().use('liferay-portlet-url', function(a) {\t                &lt;portlet:namespace/&gt;currentData = inputData.clone();\t                if( !&lt;portlet:namespace/&gt;currentData.repositoryType() )\t                \t&lt;portlet:namespace/&gt;currentData.repositoryType('&lt;%=OSPRepositoryTypes.USER_JOBS.toString()%&gt;');\t    \t        var serveResourceUrl = Liferay.PortletURL.createResourceURL();\t    \t        serveResourceUrl.setPortletId('&lt;%=portletDisplay.getId()%&gt;');\t    \t        serveResourceUrl.setParameter('command', 'GET_FILE');\t    \t        serveResourceUrl.setParameter('repositoryType', &lt;portlet:namespace/&gt;currentData.repositoryType());\t    \t        serveResourceUrl.setParameter('pathType', inputData.type());\t    \t        serveResourceUrl.setParameter('parentPath', inputData.parent());\t    \t        serveResourceUrl.setParameter('fileName', inputData.name());\t    \t        serveResourceUrl.setParameter('relative', inputData.relative());\t    \t        console.log( '[testView]Draw Input Data : ', inputData);\t\t    \t    iframe.contentWindow.drawTestViewer(inputData, serveResourceUrl.toString());\t\t    \t    $('#&lt;portlet:namespace/&gt;title').html(inputData.name());\t    \t    });\t    \t}\t    \telse{\t    \t\tconsole.log(\"[testView] test esle : load data in draw\");\t    \t\t&lt;portlet:namespace/&gt;drawView( inputData );\t    \t}\t    },\t    10\t);}getFirstFileName(OSPInputData) function &lt;portlet:namespace/&gt;getFirstFileName( inputData ){\tconsole.log('[testView]get First File Name : ', inputData );\tvar data = {\t\t&lt;portlet:namespace/&gt;command: 'GET_FIRST_FILE_NAME',\t\t&lt;portlet:namespace/&gt;pathType: inputData.type_,\t\t&lt;portlet:namespace/&gt;repositoryType: inputData.repositoryType_,\t\t&lt;portlet:namespace/&gt;parentPath: inputData.parent_,\t\t&lt;portlet:namespace/&gt;fileName: inputData.name_\t};    console.log(\"[testView] laod get first file test : \", data);\t$.ajax({\t\turl: '&lt;%= serveResourceURL.toString()%&gt;',\t\ttype: 'POST',\t\tdata  : data,\t\tdataType : 'json',\t\tsuccess: function(data) {\t\t\tconsole.log(\"[testView] get result data \", data);\t\t\tinputData.name( data.fileName );\t\t\tinputData.type( OSP.Enumeration.PathType.FILE );\t\t\t&lt;portlet:namespace/&gt;drawView( inputData );\t\t\tconsole.log(\"[testView] Get First File Data : \", inputData);\t\t},\t\terror:function(data,e){\t\t\tconsole.log('[testView]AJAX ERROR1--&gt;', data);\t\t\tconsole.log('[testView]AJAX ERROR2--&gt;', e);\t\t},\t\tcomplete: function( jqXHR, textStatus ){\t\t\tconsole.log('[testView]AJAX complete ', jqXHR);\t\t}\t});}initializeFileExplorer() function &lt;portlet:namespace/&gt;initializeFileExplorer(){\tif( $.isEmptyObject(&lt;portlet:namespace/&gt;initData) ||(\t\t&lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.FILE &amp;&amp;\t\t&lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.FOLDER &amp;&amp;\t\t&lt;portlet:namespace/&gt;initData.type() !== OSP.Enumeration.PathType.EXT ))\treturn;\tvar eventData = {              portletId: '&lt;%=portletDisplay.getId()%&gt;',              targetPortlet: &lt;portlet:namespace/&gt;fileExplorerId,              data: OSP.Util.toJSON(&lt;portlet:namespace/&gt;initData)\t};\tLiferay.fire( 'OSP_LOAD_DATA', eventData );}DownloadCurrentFile() function &lt;portlet:namespace/&gt;downloadCurrentFile(){\tconsole.log(\"[testView] Download current data\", &lt;portlet:namespace/&gt;currentData);\tif( $.isEmptyObject(&lt;portlet:namespace/&gt;currentData) ||\t\t&lt;portlet:namespace/&gt;currentData.type() !== OSP.Enumeration.PathType.FILE )\t\treturn;\tvar filePath = &lt;portlet:namespace/&gt;currentData;\tvar data = {\t\t&lt;portlet:namespace/&gt;command: \"DOWNLOAD_FILE\",\t\t&lt;portlet:namespace/&gt;pathType: filePath.type_,\t\t&lt;portlet:namespace/&gt;repositoryType: filePath.repositoryType_,\t\t&lt;portlet:namespace/&gt;parentPath: filePath.parent_,\t\t&lt;portlet:namespace/&gt;fileName: filePath.name_\t};\tvar base = '&lt;%=serveResourceURL.toString()%&gt;';\tvar sep = (base.indexOf('?') &gt; -1) ? '&amp;' : '?';\tvar url = base + sep + $.param(data);\tlocation.href = url;\t&lt;portlet:namespace/&gt;loadJSMolFile( &lt;portlet:namespace/&gt;currentData );}최종 파일 구조 지금까지 기본 설정을 마친 후 최종적인 파일 구조는 다음 그림과 같습니다. ","categories": ["workbench"],
        "tags": ["edisonworkbench","analyzer"],
        "url": "http://localhost:4000/workbench/analyzerguide8/",
        "teaser":null}]
